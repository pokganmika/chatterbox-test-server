{"version":3,"sources":["components/Header.js","routes/Home.js","components/Chat/Room.js","components/Chat/Post.js","routes/Chat.js","components/Login/Login.js","routes/Login.js","components/Signup/Signup.js","routes/Signup.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Link","to","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Fragment","Component","Room","type","placeholder","value","PostSubmit","_writeChat","e","setState","defineProperty","target","name","_sendChat","asyncToGenerator","regenerator_default","mark","_callee2","_this$state","userName","text","roomId","wrap","_context2","prev","next","axios","post","then","_ref2","_callee","res","_ref3","data","_context","console","log","get","sent","chats","stop","_x","apply","arguments","catch","_chatRender","map","chat","Post_ChatList","texts","onChange","onClick","length","ChatList","_ref5","Chat","react","Chat_Room","Post","Login","usersId","password","components_Login_Login","Signup","_writeAccount","_registerAccount","signComplete","err","Redirect","components_Signup_Signup","App","BrowserRouter","src_components_Header","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af6b77b9.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n// import styled from 'styled-components';\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <div className='header'>\n      <Link to='/' className=\"item\">Chatter Box</Link>\n      <Link to='/post' className=\"item\">Chat</Link>\n      <Link to='/users/login' className=\"item\">Log in</Link>\n      <Link to='/users/signup' className=\"item\">Sign up</Link> \n    </div>\n  );\n}\n\n// const DivHeader = styled.div`\n//   background: #5c7cfa;\n//   display: table;\n//   table-layout: fixed;\n//   width: 100%;\n// `;\n\n// const DivItem = styled.div`\n//   text-align: center;\n//   padding-top: 1rem;\n//   padding-bottom: 1rem;\n//   display: table-cell;\n//   color: white;\n//   text-decoration: none;\n//   font-size: 1.1rem;\n//   &:hover{\n//     background: #748ffc;\n//   }\n//   &:active{\n//     background: white;\n//     color: #5c7cfa;\n//   }\n// `;\n\nexport default Header;\n","import React, { Component } from 'react';\n// import axios from 'axios';\n\nclass Home extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  // async componentDidMount() {\n  //   const { data } = await axios.get('/post');\n  //   // const { data } = await axios.get('users/index')\n  //   console.log('얘가 데타 : ', data);\n  //     // .then(res => { \n  //     //   console.log('----이것이 다타',res)\n\n  //     // })\n  // }\n\n  render() { \n    return (\n      <React.Fragment>\n        <h1>Chatter Box</h1>\n      </React.Fragment>  \n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n// import axios from 'axios';\n\nclass Room extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    \n  }\n\n  _callApi () {\n    // axios.post('room/room', )\n  }\n\n  render() { \n    return ( \n      <React.Fragment>\n        <input\n          type=\"text\"\n          placeholder='roomname'\n        />\n        <input\n          type=\"submit\"\n          value=\"Room Select\"\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Room;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass PostSubmit extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {\n      userName: '',\n      text: '',\n      texts: [],\n      chats: [],\n      roomId : 1\n      // roomId : null\n    };\n  }\n\n  async componentDidMount() {\n    const { data } = await axios.get('/post');\n    // console.log('이것이 다타 : ',data)\n    this.setState({\n      chats: data\n    })\n    console.log('Chat => this.state.chat : ',this.state.chats)\n  }\n\n  _writeChat = e => { \n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n  \n  _sendChat = async () => { \n    const { userName, text, roomId } = this.state;\n    // const leng = chats.length;\n    await axios.post('/post', { userName, text, roomId })\n      .then(async res => { \n        console.log('send chat complete')\n\n        const { data } = await axios.get('/post')\n        this.setState({\n          chats: data\n        })\n\n      })\n      .catch(res => { \n        console.log('sending failed')\n      })\n  }\n\n  _chatRender = () => { \n    const { chats } = this.state;\n    return (\n      chats.map(chat => (\n        <ChatList\n        name={chat.userName}\n        text={chat.text}\n        />\n      ))\n    );\n  }\n\n  render () { \n    const { chats } = this.state;\n    return (\n      <React.Fragment>\n        <input\n          type='text'\n          placeholder='username'\n          name={'userName'}\n          value={this.state.userName}\n          onChange={this._writeChat}\n        />\n        <input\n          type='text'\n          placeholder='text'\n          name={'text'}\n          value={this.state.text}\n          onChange={this._writeChat}\n        />\n        {/* <input type='text' placeholder='roomname'/> */}\n        <input\n          type='submit'\n          value=\"Submit\"\n          onClick={this._sendChat} />\n        {chats.length !== 0 ? this._chatRender() : 'Loading'}\n      </React.Fragment>\n    );\n  }\n}\n\nconst ChatList = ({ name, text}) => { \n  return (\n    <React.Fragment>\n      <div>{name}</div>\n      <div>{text}</div>\n    </React.Fragment>\n  );\n}\n\nexport default PostSubmit;\n","import React, { Component, Fragment } from 'react';\n// import axios from 'axios';\n\nimport Room from '../components/Chat/Room';\nimport Post from '../components/Chat/Post';\n\nclass Chat extends Component {\n  // constructor(props) { \n  //   super(props);\n\n  //   this.state = {\n  //     chats: []\n  //   };\n  // }\n\n  // async componentDidMount() {\n  //   const { data } = await axios.get('/post');\n  //   // console.log('이것이 다타 : ',data)\n  //   this.setState({\n  //     ...this.state,\n  //     chats: data\n  //   })\n  //   console.log('Chat => this.state.chat : ',this.state.chats)\n  // }\n\n  // _chatRender = () => { \n  //   const { chats } = this.state;\n  //   return (\n  //     chats.map(chat => (\n  //       <ChatList\n  //       name={chat.userName}\n  //       text={chat.text}\n  //       />\n  //     ))\n  //   );\n  // }\n\n  render () { \n    // const { chats } = this.state; \n    return (\n      <Fragment>\n        <h1>Chat</h1>\n        <Room /><br />\n        <Post />\n        {/* {chats.length !== 0 ? this._chatRender() : 'Loading'} */}\n      </Fragment>\n    );\n  }\n}\n\n// const ChatList = ({ name, text}) => { \n//   return (\n//     <React.Fragment>\n//       <div>{name}</div>\n//       <div>{text}</div>\n//     </React.Fragment>\n//   );\n// }\n\nexport default Chat;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Login extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {\n      usersId: '',\n      password: ''\n    };\n  }\n  \n  componentDidMount() {\n    \n  }\n\n  render() { \n    return (\n      <React.Fragment>\n        <input type='text' placeholder='id' /><br/>\n        <input type='password' placeholder='password' /><br/>\n        <input type='submit' value='Log in' /><br/>\n        아직 회원이 아니면\n        <Link to='/users/signup'>회원가입</Link>\n        을 해주세요\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component, Fragment } from 'react';\n\nimport Log from '../components/Login/Login';\n\nclass Login extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    \n  }\n\n  render() { \n    return (\n      <Fragment>\n        <h1>로그인</h1>\n        <Log />\n      </Fragment>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport axios from 'axios';\n\nclass Signup extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {\n      usersId: '',\n      password: '',\n      signComplete: false\n    };\n  }\n\n  componentDidMount() {\n    \n  }\n\n  _writeAccount = e => { \n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  _registerAccount = async () => { \n    const { usersId, password } = this.state;\n\n    await axios.post('/users/signup', { usersId, password })\n      .then(res => { \n        console.log('[+] 유저 가입 성공');\n        // history를 사용하여 유저를 가입시킴?\n        // history는 외부에서 받아 import해서 사용할 수도 있고\n        // 만들어 사용도 가능??\n        // redirect\n\n        // this._redi();\n        //-----\n        // res.data === '가입 완료' && this.props.history.push('/users/login')\n        // console.log('이것이 다타 : ',res.data)\n        // console.log('이것이 다타 : ',this.props.history)\n        //------\n        this.setState({\n          signComplete: true\n        })\n      })\n      .catch(err => { \n        console.log('[-] 유저 가입 실패')\n      })\n  }\n\n  // _redi = () => { \n  //   return < Redirect to = {'/users/login'} />\n  // }\n\n  render () { \n    if (this.state.signComplete === true) { \n      return <Redirect to='/users/login' />\n    }\n    \n    return (\n      <React.Fragment>\n        <input\n          type='text'\n          placeholder='id'\n          name={'usersId'}\n          value={this.state.usersId}\n          onChange={this._writeAccount}\n        /><br />\n        <input\n          type='password'\n          placeholder='password'\n          name={'password'}\n          value={this.state.password}\n          onChange={this._writeAccount}\n        /><br />\n        {/* <input type='text' placeholder='password' /><br /> */}\n        {/* 패스워드 타당성 검사 필요 */}\n        <input\n          type='submit'\n          value='Sign up'\n          onClick={this._registerAccount}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Signup;\n","import React, { Component, Fragment } from 'react';\n\nimport Sign from '../components/Signup/Signup';\n\nclass Signup extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    \n  }\n\n  render() { \n    return (\n      <Fragment>\n        <h1>회원가입</h1>\n        <Sign />\n      </Fragment>\n    );\n  }\n}\n\nexport default Signup;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport Header from './components/Header';\nimport Home from './routes/Home';\nimport Chat from './routes/Chat';\nimport Login from './routes/Login';\nimport Signup from './routes/Signup';\n\nclass App extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <Router>\n        <React.Fragment>\n          <Header/>\n          {/* Route를 사용할 경우 props를 내리는 방법 but 문제가 생길 수도 있다!!*/}\n          {/* <Route exact path='/' component={() => <Home username={this.state.username}/>}/> */}\n          <Route exact path='/' component={Home} />\n          <Route path='/post' component={Chat} />\n          <Route path='/users/login' component={Login}/>\n          <Route path='/users/signup' component={Signup}/>\n        </React.Fragment>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}