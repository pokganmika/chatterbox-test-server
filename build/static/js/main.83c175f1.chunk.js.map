{"version":3,"sources":["components/Header.js","routes/Home.js","components/Home/Room.js","components/Home/Post.js","routes/Chat.js","components/Login/Login.js","routes/Login.js","components/Signup/Signup.js","routes/Signup.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Link","to","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Fragment","Component","Room","type","placeholder","value","PostSubmit","componentDidMount","_writeChat","e","setState","objectSpread","defineProperty","target","name","_sendChat","asyncToGenerator","regenerator_default","mark","_callee","_this$state","userName","text","roomId","wrap","_context","prev","next","axios","post","then","res","console","log","catch","stop","_chatRender","texts","onChange","onClick","Chat","chats","map","chat","Chat_ChatList","get","data","react","Home_Room","Post","length","ChatList","_ref2","Login","usersId","password","components_Login_Login","Signup","_writeAccount","_registerAccount","components_Signup_Signup","App","BrowserRouter","src_components_Header","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83c175f1.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n// import styled from 'styled-components';\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <div className='header'>\n      <Link to='/' className=\"item\">Chatter Box</Link>\n      <Link to='/post' className=\"item\">Chat</Link>\n      <Link to='/users/login' className=\"item\">Log in</Link>\n      <Link to='/users/signup' className=\"item\">Sign up</Link> \n    </div>\n  );\n}\n\n// const DivHeader = styled.div`\n//   background: #5c7cfa;\n//   display: table;\n//   table-layout: fixed;\n//   width: 100%;\n// `;\n\n// const DivItem = styled.div`\n//   text-align: center;\n//   padding-top: 1rem;\n//   padding-bottom: 1rem;\n//   display: table-cell;\n//   color: white;\n//   text-decoration: none;\n//   font-size: 1.1rem;\n//   &:hover{\n//     background: #748ffc;\n//   }\n//   &:active{\n//     background: white;\n//     color: #5c7cfa;\n//   }\n// `;\n\nexport default Header;\n","import React, { Component } from 'react';\n// import axios from 'axios';\n\nclass Home extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  // async componentDidMount() {\n  //   const { data } = await axios.get('/post');\n  //   // const { data } = await axios.get('users/index')\n  //   console.log('얘가 데타 : ', data);\n  //     // .then(res => { \n  //     //   console.log('----이것이 다타',res)\n\n  //     // })\n  // }\n\n  render() { \n    return (\n      <React.Fragment>\n        <h1>Chatter Box</h1>\n      </React.Fragment>  \n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n// import axios from 'axios';\n\nclass Room extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    \n  }\n\n  _callApi () {\n    // axios.post('room/room', )\n  }\n\n  render() { \n    return ( \n      <React.Fragment>\n        <input\n          type=\"text\"\n          placeholder='roomname'\n        />\n        <input\n          type=\"submit\"\n          value=\"Room Select\"\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Room;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass PostSubmit extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {\n      userName: '',\n      text: '',\n      texts: [],\n      roomId : 1\n      // roomId : null\n    };\n  }\n\n  componentDidMount = () => {\n    \n  }\n\n  _writeChat = e => { \n    this.setState({\n      ...this.state,\n      [e.target.name]: e.target.value\n    })\n  }\n  \n  _sendChat = async () => { \n    const { userName, text, roomId } = this.state;\n    \n    await axios.post('post/post', { userName, text, roomId })\n      .then(res => { \n        console.log('send chat complete')\n      })\n      .catch(res => { \n        console.log('sending failed')\n      })\n  }\n\n  _chatRender = () => { \n\n  }\n\n  render () { \n    return (\n      <React.Fragment>\n        <input\n          type='text'\n          placeholder='username'\n          name={'userName'}\n          value={this.state.userName}\n          onChange={this._writeChat}\n        />\n        <input\n          type='text'\n          placeholder='text'\n          name={'text'}\n          value={this.state.text}\n          onChange={this._writeChat}\n        />\n        {/* <input type='text' placeholder='roomname'/> */}\n        <input\n          type='submit'\n          value=\"Submit\"\n          onClick={this._sendChat} />\n        <div></div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PostSubmit;\n","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\n\nimport Room from '../components/Home/Room';\nimport Post from '../components/Home/Post';\n\nclass Chat extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {\n      chats: []\n    };\n  }\n\n  async componentDidMount() {\n    const { data } = await axios.get('/post');\n    // console.log('이것이 다타 : ',data)\n    this.setState({\n      ...this.state,\n      chats: data\n    })\n    console.log('Chat => this.state.chat : ',this.state.chats)\n  }\n\n  _chatRender = () => { \n    const { chats } = this.state;\n    // if (chats.length !== 0) { \n    //   return (\n        \n    //   );\n    // }\n    return (\n      chats.map(chat => {\n        return (\n          <ChatList\n          name={chat.userName}\n          text={chat.text}\n          />\n        );\n      })\n    );\n  }\n\n  render () { \n    const { chats } = this.state; \n    return (\n      <Fragment>\n        <h1>Chat</h1>\n        <Room /><br />\n        <Post />\n        {chats.length !== 0 ? this._chatRender() : 'Loading'}\n      </Fragment>\n    );\n  }\n}\n\nconst ChatList = ({ name, text}) => { \n  return (\n    <React.Fragment>\n      <div>{name}</div>\n      <div>{text}</div>\n    </React.Fragment>\n  );\n}\n\nexport default Chat;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Login extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {\n      usersId: '',\n      password: ''\n    };\n  }\n  \n  componentDidMount() {\n    \n  }\n\n\n\n  render() { \n    return (\n      <React.Fragment>\n        <input type='text' placeholder='id' /><br/>\n        <input type='password' placeholder='password' /><br/>\n        <input type='submit' value='Log in' /><br/>\n        아직 회원이 아니면\n        <Link to='/users/signup'>회원가입</Link>\n        을 해주세요\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component, Fragment } from 'react';\n\nimport Log from '../components/Login/Login';\n\nclass Login extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    \n  }\n\n  render() { \n    return (\n      <Fragment>\n        <h1>로그인</h1>\n        <Log />\n      </Fragment>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Signup extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {\n      usersId: '',\n      password: ''\n    };\n  }\n\n  componentDidMount() {\n    \n  }\n\n  _writeAccount = e => { \n    this.setState({\n      ...this.state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  _registerAccount = async () => { \n    const { usersId, password } = this.state;\n\n    await axios.post('users/signup', { usersId, password })\n      .then(res => { \n        console.log('[+] 유저 가입 성공')\n        // history를 사용하여 유저를 가입시킴?\n        // history는 외부에서 받아 import해서 사용할 수도 있고\n        // 만들어 사용도 가능??\n        // redirect\n      })\n      .catch(res => { \n        console.log('[-] 유저 가입 실패')\n      })\n  }\n\n  render() { \n    return (\n      <React.Fragment>\n        <input\n          type='text'\n          placeholder='id'\n          name={'usersId'}\n          value={this.state.usersId}\n          onChange={this._writeAccount}\n        /><br />\n        <input\n          type='password'\n          placeholder='password'\n          name={'password'}\n          value={this.state.password}\n          onChange={this._writeAccount}\n        /><br />\n        {/* <input type='text' placeholder='password' /><br /> */}\n        {/* 패스워드 타당성 검사 필요 */}\n        <input\n          type='submit'\n          value='Sign up'\n          onClick={this._registerAccount}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Signup;\n","import React, { Component, Fragment } from 'react';\n\nimport Sign from '../components/Signup/Signup';\n\nclass Signup extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    \n  }\n\n  render() { \n    return (\n      <Fragment>\n        <h1>회원가입</h1>\n        <Sign />\n      </Fragment>\n    );\n  }\n}\n\nexport default Signup;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport Header from './components/Header';\nimport Home from './routes/Home';\nimport Chat from './routes/Chat';\nimport Login from './routes/Login';\nimport Signup from './routes/Signup';\n\nclass App extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <Router>\n        <React.Fragment>\n          <Header/>\n          {/* Route를 사용할 경우 props를 내리는 방법 but 문제가 생길 수도 있다!!*/}\n          {/* <Route exact path='/' component={() => <Home username={this.state.username}/>}/> */}\n          <Route exact path='/' component={Home} />\n          <Route path='/post' component={Chat} />\n          <Route path='/users/login' component={Login}/>\n          <Route path='/users/signup' component={Signup}/>\n        </React.Fragment>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}