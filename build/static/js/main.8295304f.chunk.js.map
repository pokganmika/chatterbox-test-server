{"version":3,"sources":["components/Header.js","routes/Home.js","components/Chat/Room.js","components/Common/ChatCard.js","components/Chat/Post.js","routes/Chat.js","components/Login/Login.js","routes/Login.js","components/Signup/Signup.js","routes/Signup.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Link","to","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Fragment","Component","Room","type","placeholder","value","withStyles","card","maxWidth","media","height","classes","name","text","Card_default","CardActionArea_default","CardContent_default","Typography_default","gutterBottom","variant","component","PostSubmit","_writeChat","e","setState","defineProperty","target","_sendChat","asyncToGenerator","regenerator_default","mark","_callee2","_this$state","userName","roomId","wrap","_context2","prev","next","axios","post","then","_ref2","_callee","res","_ref3","data","_context","console","log","get","sent","chats","stop","_x","apply","arguments","catch","_chatRender","reverse","map","chat","Post_ChatList","texts","onChange","onClick","length","ChatList","_ref5","ChatCard","Chat","react","Chat_Room","Post","Login","usersId","password","components_Login_Login","Signup","_writeAccount","_registerAccount","signComplete","err","history","Redirect","components_Signup_Signup","App","BrowserRouter","src_components_Header","Route","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8295304f.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n// import styled from 'styled-components';\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <div className='header'>\n      <Link to='/' className=\"item\">Chatter Box</Link>\n      <Link to='/post' className=\"item\">Chat</Link>\n      <Link to='/users/login' className=\"item\">Log in</Link>\n      <Link to='/users/signup' className=\"item\">Sign up</Link> \n    </div>\n  );\n}\n\n// const DivHeader = styled.div`\n//   background: #5c7cfa;\n//   display: table;\n//   table-layout: fixed;\n//   width: 100%;\n// `;\n\n// const DivItem = styled.div`\n//   text-align: center;\n//   padding-top: 1rem;\n//   padding-bottom: 1rem;\n//   display: table-cell;\n//   color: white;\n//   text-decoration: none;\n//   font-size: 1.1rem;\n//   &:hover{\n//     background: #748ffc;\n//   }\n//   &:active{\n//     background: white;\n//     color: #5c7cfa;\n//   }\n// `;\n\nexport default Header;\n","import React, { Component } from 'react';\n// import axios from 'axios';\n\nclass Home extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  // async componentDidMount() {\n  //   const { data } = await axios.get('/post');\n  //   // const { data } = await axios.get('users/index')\n  //   console.log('얘가 데타 : ', data);\n  //     // .then(res => { \n  //     //   console.log('----이것이 다타',res)\n\n  //     // })\n  // }\n\n  render() { \n    return (\n      <React.Fragment>\n        <h1>Chatter Box</h1>\n      </React.Fragment>  \n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n// import axios from 'axios';\n\nclass Room extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    \n  }\n\n  _callApi () {\n    // axios.post('room/room', )\n  }\n\n  render() { \n    return ( \n      <React.Fragment>\n        <input\n          type=\"text\"\n          placeholder='roomname'\n        />\n        <input\n          type=\"submit\"\n          value=\"Room Select\"\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Room;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  card: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n};\n\nfunction MediaCard(props) {\n  const { classes, name, text } = props;\n  return (\n    <Card className={classes.card}>\n      <CardActionArea>\n        {/* <CardMedia\n          className={classes.media}\n          image=\"/static/images/cards/contemplative-reptile.jpg\"\n          title=\"Contemplative Reptile\"\n        /> */}\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {name}\n          </Typography>\n          <Typography component=\"p\">\n            {text}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      {/* <CardActions>\n        <Button size=\"small\" color=\"primary\">\n          Share\n        </Button>\n        <Button size=\"small\" color=\"primary\">\n          Learn More\n        </Button>\n      </CardActions> */}\n    </Card>\n  );\n}\n\nMediaCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MediaCard);\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport ChatCard from '../Common/ChatCard';\n\nclass PostSubmit extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {\n      userName: '',\n      text: '',\n      texts: [],\n      chats: [],\n      roomId : 1\n      // roomId : null\n    };\n  }\n\n  async componentDidMount() {\n    const { data } = await axios.get('/post');\n    // console.log('이것이 다타 : ',data)\n    this.setState({\n      chats: data\n    })\n    console.log('Chat => this.state.chat : ',this.state.chats)\n  }\n\n  _writeChat = e => { \n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n  \n  _sendChat = async () => { \n    const { userName, text, roomId } = this.state;\n    await axios.post('/post', { userName, text, roomId })\n      .then(async res => { \n        console.log('send chat complete')\n\n        const { data } = await axios.get('/post')\n        this.setState({\n          chats: data\n        })\n\n      })\n      .catch(res => { \n        console.log('sending failed')\n      })\n  }\n\n  _chatRender = () => { \n    const { chats } = this.state;\n    return (\n      chats.reverse().map(chat => (\n        <ChatList\n        name={chat.userName}\n        text={chat.text}\n        />\n      ))\n    );\n  }\n\n  render () { \n    const { chats } = this.state;\n    return (\n      <React.Fragment>\n        <input\n          type='text'\n          placeholder='username'\n          name={'userName'}\n          value={this.state.userName}\n          onChange={this._writeChat}\n        />\n        <input\n          type='text'\n          placeholder='text'\n          name={'text'}\n          value={this.state.text}\n          onChange={this._writeChat}\n        />\n        {/* <input type='text' placeholder='roomname'/> */}\n        <input\n          type='submit'\n          value=\"Submit\"\n          onClick={this._sendChat} />\n        {chats.length !== 0 ? this._chatRender() : 'Loading'}\n      </React.Fragment>\n    );\n  }\n}\n\nconst ChatList = ({ name, text}) => { \n  return (\n    <React.Fragment>\n      <ChatCard\n        name={name}\n        text={text}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default PostSubmit;\n","import React, { Component, Fragment } from 'react';\n// import axios from 'axios';\n\nimport Room from '../components/Chat/Room';\nimport Post from '../components/Chat/Post';\n\nclass Chat extends Component {\n  // constructor(props) { \n  //   super(props);\n\n  //   this.state = {\n  //     chats: []\n  //   };\n  // }\n\n  // async componentDidMount() {\n  //   const { data } = await axios.get('/post');\n  //   // console.log('이것이 다타 : ',data)\n  //   this.setState({\n  //     ...this.state,\n  //     chats: data\n  //   })\n  //   console.log('Chat => this.state.chat : ',this.state.chats)\n  // }\n\n  // _chatRender = () => { \n  //   const { chats } = this.state;\n  //   return (\n  //     chats.map(chat => (\n  //       <ChatList\n  //       name={chat.userName}\n  //       text={chat.text}\n  //       />\n  //     ))\n  //   );\n  // }\n\n  render () { \n    // const { chats } = this.state; \n    return (\n      <Fragment>\n        <h1>Chat</h1>\n        <Room /><br />\n        <Post />\n        {/* {chats.length !== 0 ? this._chatRender() : 'Loading'} */}\n      </Fragment>\n    );\n  }\n}\n\n// const ChatList = ({ name, text}) => { \n//   return (\n//     <React.Fragment>\n//       <div>{name}</div>\n//       <div>{text}</div>\n//     </React.Fragment>\n//   );\n// }\n\nexport default Chat;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Login extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {\n      usersId: '',\n      password: ''\n    };\n  }\n  \n  componentDidMount() {\n    \n  }\n\n  render() { \n    return (\n      <React.Fragment>\n        <input type='text' placeholder='id' /><br/>\n        <input type='password' placeholder='password' /><br/>\n        <input type='submit' value='Log in' /><br/>\n        아직 회원이 아니면\n        <Link to='/users/signup'>회원가입</Link>\n        을 해주세요\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component, Fragment } from 'react';\n\nimport Log from '../components/Login/Login';\n\nclass Login extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    \n  }\n\n  render() { \n    return (\n      <Fragment>\n        <h1>로그인</h1>\n        <Log />\n      </Fragment>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport axios from 'axios';\n\nclass Signup extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {\n      usersId: '',\n      password: '',\n      signComplete: false\n    };\n  }\n\n  componentDidMount() {\n    \n  }\n\n  _writeAccount = e => { \n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  _registerAccount = async () => { \n    const { usersId, password } = this.state;\n\n    await axios.post('/users/signup', { usersId, password })\n      .then(res => { \n        console.log('[+] 유저 가입 성공');\n        // history를 사용하여 유저를 가입시킴?\n        // history는 외부에서 받아 import해서 사용할 수도 있고\n        // 만들어 사용도 가능??\n        // redirect\n\n        //-----\n        // res.data === '가입 완료' && this.props.history.push('/users/login')\n        // console.log('이것이 다타 : ',res.data)\n        // console.log('이것이 다타 : ',this.props.history)\n        //------\n        this.setState({\n          signComplete: true\n        })\n      })\n      .catch(err => { \n        console.log('[-] 유저 가입 실패')\n      })\n  }\n\n  render () { \n    console.log('이것이 히스토리 : ', this.props.history)\n\n    if (this.state.signComplete === true) { \n      return <Redirect to='/users/login' />\n    }\n\n    return (\n      <React.Fragment>\n        <input\n          type='text'\n          placeholder='id'\n          name={'usersId'}\n          value={this.state.usersId}\n          onChange={this._writeAccount}\n        /><br />\n        <input\n          type='password'\n          placeholder='password'\n          name={'password'}\n          value={this.state.password}\n          onChange={this._writeAccount}\n        /><br />\n        {/* <input type='text' placeholder='password' /><br /> */}\n        {/* 패스워드 타당성 검사 필요 */}\n        <input\n          type='submit'\n          value='Sign up'\n          onClick={this._registerAccount}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Signup;\n","import React, { Component, Fragment } from 'react';\n\nimport Sign from '../components/Signup/Signup';\n\nclass Signup extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    \n  }\n\n  render() { \n    return (\n      <Fragment>\n        <h1>회원가입</h1>\n        <Sign />\n      </Fragment>\n    );\n  }\n}\n\nexport default Signup;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport Header from './components/Header';\nimport Home from './routes/Home';\nimport Chat from './routes/Chat';\nimport Login from './routes/Login';\nimport Signup from './routes/Signup';\n\nclass App extends Component {\n  constructor(props) { \n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <Router>\n        <>\n          <Header/>\n          {/* Route를 사용할 경우 props를 내리는 방법 but 문제가 생길 수도 있다!!*/}\n          {/* <Route exact path='/' component={() => <Home username={this.state.username}/>}/> */}\n          <Route exact path='/' component={Home} />\n          <Route path='/post' component={Chat} />\n          <Route path='/users/login' component={Login}/>\n          <Route path='/users/signup' component={Signup}/>\n        </>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}